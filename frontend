import { useState } from "react";
import "./App.css";

function App() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [login, setlogin] = useState(true);
  const [msg, setmsg] = useState("");
  const [protectedMsg, setProtectedMsg] = useState("");

  const [token, setToken] = useState(localStorage.getItem("token") || "");

  const handleAuth = async () => {
    setmsg("");
    const endpoint = login ? "login" : "Register";

    try {
      const response = await fetch(`http://localhost:4100/${endpoint}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: username, password: password }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.message);

      if (login) {
        setToken(data.token);
        localStorage.setItem("token", data.token);
        setmsg("Login Succesful !");
      } else {
        setmsg("Registration Succesful !");
      }
    } catch (err) {
      setmsg(err.message || "Something went wrong");
    }
  };

  const fetchProtected = async () => {
    try {
      const response = await fetch("http://localhost:4100/get", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.message);
      setProtectedMsg(data.message);
    } catch (err) {
      setProtectedMsg(err.message || "Access denied");
    }
  };

  const logout = () => {
    setToken("");
    localStorage.removeItem("token");
    setmsg("");
    setProtectedMsg("");
  };

  return (
    <>
      app
      <div>
        <h1>JWT Library</h1>

        <input
          type="text"
          placeholder="Enter your name"
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="enter password"
          onChange={(e) => setPassword(e.target.value)}
        />

        <button onClick={handleAuth}> {login ? "login" : "register"}</button>

        <button onClick={() => setlogin(!login)}>
          {login ? "Switch to Register" : "Switch to Login"}{" "}
        </button>

        {msg && <p>{msg}</p>}

        {token && (
          <div>
            <button onClick={fetchProtected}> Access Protected Route</button>

            <button onClick={logout}>Logout</button>
            <p>{protectedMsg}</p>
          </div>
        )}
      </div>
    </>
  );
}

export default App;
