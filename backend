const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();

const SECRET_KEY = "mysecretkey";

app.use(bodyParser.json());
app.use(cors());

mongoose
  .connect("mongodb://localhost:27017/libraryjwt", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("MongoDB connected"))
  .catch((err) => console.error("MongoDB connection error:", err));

const userSchema = new mongoose.Schema({
  username: String,
  password: String,
});

const User = mongoose.model("User", userSchema);

app.post("/Register", async (req, resp) => {
  let data = new User(req.body);
  let result = await data.save();
  result = result.toObject();
  resp.send(result);
});

app.post("/login", async (req, res) => {
  const { username, password } = req.body;

  const user = await User.findOne({ username, password });
  if (!user) return res.status(401).json({ message: "Invalid credentials" });

  const token = jwt.sign(
    { id: user._id, username: user.username },
    SECRET_KEY,
    {
      expiresIn: "1h",
    }
  );

  res.json({ token });
});

function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) return res.sendStatus(401);

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

app.get("/get", authenticateToken, (req, res) => {
  res.json({
    message: `Hello ${req.user.username}, you accessed protected data.`,
  });
});

app.listen(4100);
